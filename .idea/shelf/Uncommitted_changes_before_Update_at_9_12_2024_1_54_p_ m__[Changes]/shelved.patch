Index: js/sessionMenu.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const sessionMenu = (() => {\r\n    let nickname = sessionStorage.getItem('nickname');\r\n    let api = apiClient;\r\n    let stompClient = null;\r\n    let subscription = null;\r\n\r\n    document.addEventListener('DOMContentLoaded', (event) => {\r\n        sessionMenu.updateUserCount();\r\n    });\r\n\r\n\r\n    const enterSession = async (sessionId) => {\r\n        try {\r\n            if (!nickname || nickname.length === 0) {\r\n                alert(\"No se ha ingresado un nickname\");\r\n                return;\r\n            }\r\n            await api.enterSession(sessionId, nickname);\r\n            stompClient.send(\"/app/sessions\", {}); \r\n            sessionStorage.setItem('session', sessionId);\r\n            window.location.href = \"game.html\";\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(error.responseJSON.error);\r\n        }\r\n    };\r\n\r\n    let connectAndSubscribe = function () {\r\n        console.info('Connecting to WS...');\r\n        //let socket = new SockJS('http://localhost:8080/stompendpoint');\r\n        let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');\r\n        stompClient = Stomp.over(socket);\r\n        stompClient.connect({}, function (frame) {\r\n            console.log('Connected: ' + frame);\r\n            subscription = stompClient.subscribe('/topic/sessions', function () {\r\n                updateUserCount();\r\n            });\r\n        });\r\n    };\r\n\r\n    const initSessionMenu = () => {\r\n        connectAndSubscribe();\r\n    };\r\n\r\n    const updateUserCount = async () => { //REALIZAR -> QUE ACTUALIZE SEGUN EL ID DE LA SESSION INCIADA\r\n        try {\r\n            const currentUsers = await api.getPlayerCountInSession(\"1\");\r\n            const element = document.getElementById(\"capacity-1\");\r\n            if (element) {\r\n                element.textContent = `${currentUsers}/4`;\r\n            }\r\n        } catch (error) {\r\n            console.log(error.responseJSON.error);\r\n        }\r\n\r\n    };\r\n    \r\n\r\n    const unsubscribe = () => {\r\n        if (subscription !== null) {\r\n            subscription.unsubscribe();\r\n        }\r\n        console.log(\"Unsubscribed from the gameSession Topic\");\r\n    };\r\n\r\n    return {\r\n        enterSession,\r\n        unsubscribe,\r\n        init: function () {\r\n            initSessionMenu();\r\n        },\r\n        updateUserCount\r\n    };\r\n\r\n})();\r\n\r\nsessionMenu.init();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/sessionMenu.js b/js/sessionMenu.js
--- a/js/sessionMenu.js	(revision b2bfe5c9b7bf13e6b32b674b18c0bf817ea1cd2d)
+++ b/js/sessionMenu.js	(date 1733768628221)
@@ -1,14 +1,56 @@
 const sessionMenu = (() => {
-    let nickname = sessionStorage.getItem('nickname');
     let api = apiClient;
     let stompClient = null;
     let subscription = null;
 
     document.addEventListener('DOMContentLoaded', (event) => {
+        // Capturar parámetros de la URL
+        const urlParams = new URLSearchParams(window.location.search);
+        const token = urlParams.get('token');
+        const displayName = urlParams.get('displayName');
+
+        // Guardar los valores en sessionStorage
+        if (token && displayName) {
+            sessionStorage.setItem('token', token);
+            sessionStorage.setItem('displayName', displayName);
+            console.log('nickname guardado:', sessionStorage.getItem('displayName'));
+            console.log('Token y displayName guardados en sessionStorage');
+        } else {
+            console.error('Faltan parámetros en la URL para guardar en sessionStorage');
+        }
+
+        initializeUserSession();
+
         sessionMenu.updateUserCount();
     });
+    let nickname = sessionStorage.getItem('displayName');
+    console.log("nickname: ",nickname);
 
+    // Función para inicializar la sesión del usuario
+    const initializeUserSession = async () => {
+        try {
+            const nickname = sessionStorage.getItem("displayName");
+            if (!nickname) {
+                throw new Error('Nickname no encontrado');
+            }
+            await handleNickname(nickname);
+        } catch (error) {
+            console.error("Error al inicializar la sesión:", error);
+        }
+    };
+    
 
+    // Función para manejar el nickname (verificar existencia o realizar alguna acción con él)
+    const handleNickname = async (newNickname) => {
+        try {
+            const player = await api.verifyNickname(newNickname);
+            console.log('player:', player);
+        } catch (error) {
+            console.error("Error al manejar el nickname:", error);
+            throw error;
+        }
+    };
+
     const enterSession = async (sessionId) => {
         try {
             if (!nickname || nickname.length === 0) {
@@ -27,8 +69,8 @@
 
     let connectAndSubscribe = function () {
         console.info('Connecting to WS...');
-        //let socket = new SockJS('http://localhost:8080/stompendpoint');
-        let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');
+        let socket = new SockJS('http://localhost:8080/stompendpoint');
+        // let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');
         stompClient = Stomp.over(socket);
         stompClient.connect({}, function (frame) {
             console.log('Connected: ' + frame);
@@ -64,6 +106,7 @@
     };
 
     return {
+        // initializeUserSession,
         enterSession,
         unsubscribe,
         init: function () {
Index: js/login.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const login = (() => {\r\n    let api = apiClient;\r\n\r\n    const loginWithMicrosoft = async () => {\r\n        try {\r\n            loginWithMicrosoftInNewTab();\r\n        } catch (error) {\r\n            console.error(\"Error during authentication: \", error);\r\n        }\r\n    };\r\n\r\n    const loginWithMicrosoftInNewTab = async () => {\r\n        const popup = window.open(\r\n            //\"http://localhost:8080/oauth2/authorization/aad\",\r\n            \"https://proyectoarsw.duckdns.org/oauth2/authorization/aad\",\r\n            \"_blank\",\r\n            \"width=600,height=600\"\r\n        );\r\n\r\n        window.addEventListener(\"message\", (event) => {\r\n            if (event.origin !== \"https://calm-rock-0d4eb650f.5.azurestaticapps.net\") return; // Validar origen del mensaje\r\n            if (event.data.status === \"success\") {\r\n                console.log(\"Autenticación completada.\"); \r\n                sessionStorage.setItem(\"nickname\", getCookie('display_name'));\r\n                console.log(sessionStorage.getItem(\"nickname\"));\r\n                const authToken = getCookie(\"auth_token\");    \r\n                console.log('authToken:', authToken); \r\n                initializeUserSession();\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    function getCookie(name) {\r\n        const value = `; ${document.cookie}`;\r\n        const parts = value.split(`; ${name}=`);\r\n        if (parts.length === 2) return parts.pop().split(';').shift();\r\n        return null;\r\n    }\r\n\r\n\r\n    const initializeUserSession = async () => {\r\n        try {\r\n\r\n            await handleNickname(sessionStorage.getItem(\"nickname\"));\r\n            window.location.href = \"./sessionMenu.html\";\r\n\r\n        } catch (error) {\r\n            console.error(\"Error al inicializar la sesión:\", error);\r\n        }\r\n    };\r\n\r\n    const handleNickname = async (newNickname) => {\r\n        try {\r\n            const player = await api.verifyNickname(newNickname);\r\n            console.log('player:', player);\r\n        } catch (error) {\r\n            console.error(\"Error al manejar el nickname:\", error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    return {\r\n        loginWithMicrosoft,\r\n        getDisplayName: () => sessionStorage.getItem(\"nickname\"),\r\n    };\r\n})();\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/login.js b/js/login.js
--- a/js/login.js	(revision b2bfe5c9b7bf13e6b32b674b18c0bf817ea1cd2d)
+++ b/js/login.js	(date 1733765933560)
@@ -1,67 +1,14 @@
 const login = (() => {
-    let api = apiClient;
-
     const loginWithMicrosoft = async () => {
         try {
-            loginWithMicrosoftInNewTab();
+            window.location.href = "http://localhost:8080/oauth2/authorization/aad";
+
         } catch (error) {
             console.error("Error during authentication: ", error);
         }
     };
 
-    const loginWithMicrosoftInNewTab = async () => {
-        const popup = window.open(
-            //"http://localhost:8080/oauth2/authorization/aad",
-            "https://proyectoarsw.duckdns.org/oauth2/authorization/aad",
-            "_blank",
-            "width=600,height=600"
-        );
-
-        window.addEventListener("message", (event) => {
-            if (event.origin !== "https://calm-rock-0d4eb650f.5.azurestaticapps.net") return; // Validar origen del mensaje
-            if (event.data.status === "success") {
-                console.log("Autenticación completada."); 
-                sessionStorage.setItem("nickname", getCookie('display_name'));
-                console.log(sessionStorage.getItem("nickname"));
-                const authToken = getCookie("auth_token");    
-                console.log('authToken:', authToken); 
-                initializeUserSession();
-
-            }
-        });
-    };
-
-    function getCookie(name) {
-        const value = `; ${document.cookie}`;
-        const parts = value.split(`; ${name}=`);
-        if (parts.length === 2) return parts.pop().split(';').shift();
-        return null;
-    }
-
-
-    const initializeUserSession = async () => {
-        try {
-
-            await handleNickname(sessionStorage.getItem("nickname"));
-            window.location.href = "./sessionMenu.html";
-
-        } catch (error) {
-            console.error("Error al inicializar la sesión:", error);
-        }
-    };
-
-    const handleNickname = async (newNickname) => {
-        try {
-            const player = await api.verifyNickname(newNickname);
-            console.log('player:', player);
-        } catch (error) {
-            console.error("Error al manejar el nickname:", error);
-            throw error;
-        }
-    };
-
     return {
-        loginWithMicrosoft,
-        getDisplayName: () => sessionStorage.getItem("nickname"),
+        loginWithMicrosoft
     };
 })();
Index: js/apiclient.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\nawait se utiliza para esperar a que la promesa devuelta por fetch\r\nse resuelva, es decir, esperar a que los datos lleguen del servidor.\r\n*/\r\n\r\nconst apiClient = (() => {\r\n\r\n\r\n    //const url = \"http://localhost:8080/cargoMaze/\";\r\n    //const url = \"https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/cargoMaze/\"\r\n    const url = \"https://proyectoarsw.duckdns.org/cargoMaze/\";\r\n    \r\n    //GET\r\n\r\n    const getGameSessionBoard = async (gameSessionId) => {\r\n        let response = await fetch(`${url}sessions/${gameSessionId}/board/state`);\r\n        return await response.json();\r\n    }\r\n\r\n    const getGameSessionState = async (gameSessionId) => {\r\n        let response = await fetch(`${url}sessions/${gameSessionId}/state`);\r\n        return await response.json();\r\n    }\r\n\r\n    const getPlayersInSession = async (gameSessionId) => {\r\n        let response = await fetch(`${url}sessions/${gameSessionId}/players`);\r\n        return await response.json();\r\n    };\r\n\r\n    const getPlayerCountInSession = async (gameSessionId) => {\r\n        let response = await fetch(`${url}sessions/${gameSessionId}/players/count`);\r\n        return await response.json();\r\n    };\r\n\r\n    //POST\r\n\r\n    const login = async (nickname) => {\r\n        let json = JSON.stringify({ nickname: nickname });\r\n        let promise = $.ajax({\r\n            url: url + \"players\",\r\n            type: \"POST\",\r\n            data: json,\r\n            contentType: \"application/json\"\r\n        })\r\n        return promise;\r\n    };\r\n\r\n    // PUT\r\n\r\n    const enterSession = async (gameSessionId, nickname) => {\r\n        let json = JSON.stringify({ nickname: nickname });\r\n        let response = await $.ajax({\r\n            url: url + \"sessions/\" + gameSessionId + \"/players\",\r\n            type: 'PUT',\r\n            data: json,\r\n            contentType: \"application/json\"\r\n        });\r\n        return response; // Return the response to the caller\r\n    };\r\n\r\n\r\n    const movePlayer = async (gameSessionId, nickname, newPosition) => {\r\n        let json = JSON.stringify({ \"x\": newPosition.x, \"y\": newPosition.y });\r\n        let response = await $.ajax({\r\n            url: url + \"sessions/\" + gameSessionId + \"/players/\" + nickname + \"/move\",\r\n            type: 'PUT',\r\n            data: json,\r\n            contentType: \"application/json\"\r\n        });\r\n        return response; // Return the response to the caller\r\n\r\n    };\r\n\r\n    const resetGameSession = async (gameSessionId) => {\r\n        let json = JSON.stringify({ gameSessionId: gameSessionId });\r\n        let response = await $.ajax({\r\n            url: url + \"sessions/\" + gameSessionId + \"/reset\",\r\n            type: 'PUT',\r\n            data: json,\r\n            contentType: \"application/json\"\r\n        });\r\n        return response; // Return the response to the caller\r\n    };\r\n\r\n\r\n    //DELETE\r\n\r\n    const removePlayerFromSession = async (gameSessionId, nickname) => {\r\n        let json = JSON.stringify({ nickname: nickname, gameSessionId: gameSessionId });\r\n        let response = await $.ajax({\r\n            url: url + \"sessions/\" + gameSessionId + \"/players/\" + nickname,\r\n            type: 'DELETE',\r\n            data: json,\r\n            contentType: \"application/json\"\r\n        });\r\n        console.log(response); // Log successful response\r\n        return response; // Return the response to the caller\r\n    }\r\n\r\n    // verificar nickname\r\n    const verifyNickname = async (nickname) => {\r\n        try {\r\n            let response = await fetch(`${url}players/${nickname}`);\r\n            if (!response.ok) {\r\n                throw new Error('Nickname no disponible');\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        login,\r\n        getGameSessionBoard,\r\n        getGameSessionState,\r\n        enterSession,\r\n        getPlayersInSession,\r\n        movePlayer,\r\n        removePlayerFromSession,\r\n        getPlayerCountInSession,\r\n        resetGameSession,\r\n        verifyNickname\r\n    };\r\n\r\n})();
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/apiclient.js b/js/apiclient.js
--- a/js/apiclient.js	(revision b2bfe5c9b7bf13e6b32b674b18c0bf817ea1cd2d)
+++ b/js/apiclient.js	(date 1733768251473)
@@ -6,9 +6,9 @@
 const apiClient = (() => {
 
 
-    //const url = "http://localhost:8080/cargoMaze/";
+    const url = "http://localhost:8080/cargoMaze/";
     //const url = "https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/cargoMaze/"
-    const url = "https://proyectoarsw.duckdns.org/cargoMaze/";
+    // const url = "https://proyectoarsw.duckdns.org/cargoMaze/";
     
     //GET
 
@@ -23,14 +23,33 @@
     }
 
     const getPlayersInSession = async (gameSessionId) => {
-        let response = await fetch(`${url}sessions/${gameSessionId}/players`);
+        const token = sessionStorage.getItem("token"); 
+        const response = await fetch(`${url}sessions/${gameSessionId}/players`, {
+            headers: {
+                'Authorization': `Bearer ${token}`
+            }
+        });
+        if (!response.ok) {
+            throw new Error('Failed to fetch player count');
+        }
         return await response.json();
     };
 
     const getPlayerCountInSession = async (gameSessionId) => {
-        let response = await fetch(`${url}sessions/${gameSessionId}/players/count`);
+        const token = sessionStorage.getItem("token");
+        const response = await fetch(`${url}sessions/${gameSessionId}/players/count`, {
+            headers: {
+                'Authorization': `Bearer ${token}`
+            }
+        });
+    
+        if (!response.ok) {
+            throw new Error('Failed to fetch player count');
+        }
+    
         return await response.json();
     };
+    
 
     //POST
 
@@ -110,6 +129,30 @@
         }
     };
 
+    //Microsoft
+    const authenticateWithMicrosoft = async () => {
+        try {
+            let response = await fetch(`${url}auth/microsoft`);
+            if (!response.ok) {
+                throw new Error('Error durante la autenticación con Microsoft');
+            }
+            let userInfo = await response.json();
+
+            // Acceder a los valores del JSON
+            const { displayName, token } = userInfo;
+
+            // Verificar si los datos existen y procesarlos
+            if (displayName && token) {
+                console.log("regresamos usuario.");
+                return userInfo;
+            } else {
+                console.warn("Datos de autenticación no encontrados en la respuesta.");
+            }
+        } catch (error) {
+            console.error(error);
+            throw error;
+        }
+    };
 
     return {
         login,
@@ -121,7 +164,8 @@
         removePlayerFromSession,
         getPlayerCountInSession,
         resetGameSession,
-        verifyNickname
+        verifyNickname,
+        authenticateWithMicrosoft
     };
 
 })();
\ No newline at end of file
Index: js/board.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const board = (() => {\r\n\r\n    class Position{\r\n        constructor(x,y){\r\n            this.x=x;\r\n            this.y=y;\r\n        }        \r\n    }\r\n\r\n\r\n    const api = apiClient;\r\n    const nickname = sessionStorage.getItem('nickname');\r\n    const session = sessionStorage.getItem('session');\r\n    /*let state = null;\r\n\r\n    /* Escucha el evento `beforeunload` para detectar cuando el usuario intenta salir de la página.\r\n    window.addEventListener('beforeunload', async (event) => {\r\n        await board.exitFromGameSession();\r\n    });\r\n\r\n    // Escucha el evento `popstate` para detectar cambios en el historial, como cuando se presiona el botón \"Atrás\".\r\n    window.addEventListener('popstate', async (event) => {\r\n        await board.exitFromGameSession();\r\n    });\r\n    */\r\n    const handleKeydown = (e) => {\r\n        switch(e.key) {\r\n            case 'a':\r\n                createPositionFromMovement('LEFT');\r\n                break;\r\n            case 'd':\r\n                createPositionFromMovement('RIGHT');\r\n                break;\r\n            case 'w':\r\n                createPositionFromMovement('UP');\r\n                break;\r\n            case 's':\r\n                createPositionFromMovement('DOWN');\r\n                break;\r\n        }\r\n    };\r\n\r\n\r\n    //MOVEMENTS LISTENERS\r\n    document.addEventListener('DOMContentLoaded', (event) => {\r\n        board.initializeBoard();\r\n    });\r\n\r\n    document.addEventListener('keydown', handleKeydown);\r\n    \r\n    const initializeBoard = async () => {\r\n        try {\r\n            const boardArray = await api.getGameSessionBoard(\"1\"); // Esperar a que la promesa se resuelva\r\n            generateBoard(boardArray);\r\n        } catch (error) {\r\n            console.log(\"Error al obtener el tablero de la sesión:\", error.responseJSON.error);\r\n        }\r\n    }\r\n\r\n    const generateBoard = (boardArray) => {\r\n        const gameBoard = document.getElementById('game-board');\r\n        if (!gameBoard) {\r\n            console.log(\"El elemento game-board no se encontró en el DOM\");\r\n            return;\r\n        }\r\n\r\n        // Limpiar el tablero antes de generarlo\r\n        gameBoard.innerHTML = '';\r\n        boardArray.forEach(row => {\r\n            row.forEach(cell => {\r\n                const cellDiv = document.createElement('li');\r\n                cellDiv.classList.add('cell');\r\n\r\n                switch (cell) {\r\n                    case '.':\r\n                        cellDiv.classList.add('empty');\r\n                        break;\r\n                    case '#':\r\n                        cellDiv.classList.add('wall');\r\n                        cellDiv.innerText = '\uD83E\uDDF1';\r\n                        break;\r\n                    case 'B':\r\n                        cellDiv.classList.add('box');\r\n                        cellDiv.innerText = '\uD83D\uDCE6'; \r\n                        break;\r\n                    case 'T':\r\n                        cellDiv.classList.add('goal');\r\n                        cellDiv.style.backgroundColor = 'yellow'; \r\n                        break;\r\n                    case 'P':\r\n                        cellDiv.classList.add('player');\r\n                        cellDiv.innerText = '\uD83D\uDE03';\r\n                        break;\r\n                    case 'BT':\r\n                        cellDiv.classList.add('boxtarget');\r\n                        cellDiv.innerText = '\uD83D\uDCE6';\r\n                        cellDiv.style.backgroundColor = 'yellow'; \r\n                        break;\r\n                    case 'PT':\r\n                        cellDiv.classList.add('playertarget');\r\n                        cellDiv.innerText = '\uD83D\uDE03';\r\n                        cellDiv.style.backgroundColor = 'yellow'; \r\n                        break;\r\n                }\r\n                gameBoard.appendChild(cellDiv);\r\n            });\r\n        });\r\n    }\r\n\r\n    const createPositionFromMovement = async (direction) => {\r\n        let newPosX = 0;\r\n        let newPosY = 0;\r\n\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                newPosX -= 1;\r\n                break;\r\n            case 'RIGHT':\r\n                newPosX += 1;\r\n                break;\r\n            case 'UP':\r\n                newPosY -= 1;\r\n                break;\r\n            case 'DOWN':\r\n                newPosY += 1;\r\n                break;\r\n            default:\r\n                console.log('Dirección inválida:', direction);\r\n                return;\r\n\r\n        }\r\n        let position = new Position(newPosX, newPosY)\r\n        movePlayer(position)\r\n    \r\n    };\r\n\r\n    const movePlayer = async (position) => {\r\n        try {\r\n            await stompClient.send(\"/app/sessions/move.\" + session, {}, JSON.stringify({ \r\n                nickname: nickname,\r\n                position: { \r\n                    x: position.x, \r\n                    y: position.y \r\n                }}));\r\n        } catch (error) {\r\n            console.log(\"Error al mover el jugador:\", error.responseJSON.error);\r\n        }\r\n    };\r\n\r\n    //PLAYERS PANEL FUNCIONALITY\r\n\r\n    const initializeGameSession = async () => {\r\n        try {\r\n            if (!nickname || !session) {\r\n                console.log(\"Nickname o Game Session ID no encontrados.\");\r\n                return;\r\n            }\r\n            await updatePlayerList(session);\r\n        } catch (error) {\r\n            console.log(error.responseJSON.error);\r\n        }\r\n    };\r\n\r\n    const updatePlayerList = async (session) => {\r\n        try {\r\n            const players = await api.getPlayersInSession(session);\r\n            const playerList = document.getElementById(\"player-list\");\r\n\r\n            const existingNicknames = Array.from(playerList.children).map(item => item.textContent);\r\n            \r\n            const newNicknames = players.map(player => player.nickname);\r\n            const hasChanges = existingNicknames.length !== newNicknames.length ||\r\n                !newNicknames.every(nickname => existingNicknames.includes(nickname));\r\n\r\n            if (!hasChanges) return;\r\n            playerList.innerHTML = \"\";\r\n            players.forEach(player => {\r\n                const listItem = document.createElement(\"li\");\r\n                listItem.textContent = player.nickname;\r\n                playerList.appendChild(listItem);\r\n            });\r\n        } catch (error) {\r\n            console.error(error.responseJSON.error);\r\n        }\r\n    };\r\n\r\n    const exitFromGameSession = async () => {\r\n        try {\r\n            await api.removePlayerFromSession(session, nickname);\r\n            await stompClient.send(\"/app/sessions\", {});\r\n            await stompClient.send(\"/app/sessions/enterOrExitSession.\" + session, {});\r\n            unsubscribe();\r\n            sessionStorage.removeItem('session');\r\n            window.location.href = \"./sessionMenu.html\";\r\n        } catch (error) {\r\n            console.log(error.responseJSON.error);\r\n        }\r\n    };\r\n\r\n    const enterSession = () => {\r\n        return stompClient.send(\"/app/sessions/enterOrExitSession.\" + session, {}); \r\n    };\r\n\r\n    //STOMP FUNCTIONS\r\n    let stompClient = null;\r\n    let subscription = null;\r\n\r\n    const connectAndSubscribe = async function () {\r\n        await new Promise((resolve, reject) => {\r\n            console.info('Connecting to WS...');\r\n            let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');\r\n            //let socket = new SockJS('http://localhost:8080/stompendpoint');\r\n            stompClient = Stomp.over(socket);\r\n            stompClient.connect({}, function (frame) {\r\n            console.log('Connected: ' + frame);\r\n            subscription = stompClient.subscribe('/topic/sessions/' + session + \"/move\", function (eventbody) {\r\n                initializeBoard();\r\n            });\r\n\r\n            subscription = stompClient.subscribe('/topic/sessions/' + session + \"/updatePlayerList\", function (eventbody) {\r\n                updatePlayerList(session);\r\n            });\r\n\r\n            subscription = stompClient.subscribe('/topic/sessions/' + session + \"/updateBoard\", function (eventbody) {\r\n                initializeBoard();\r\n            });\r\n              \r\n            subscription = stompClient.subscribe('/topic/sessions/' + session + \"/gameWon\", function (eventbody) {\r\n                const gameStatus = eventbody.body;\r\n                handleGameStatus(gameStatus);\r\n            });\r\n            resolve();\r\n            }, function (error) {\r\n            reject(error);\r\n            console.log(\"STOMP error\");\r\n            });\r\n        });\r\n    };\r\n\r\n    const unsubscribe = () => {\r\n        if (subscription !== null) {\r\n            subscription.unsubscribe();\r\n        }\r\n        console.log(\"Unsubscribed from the gameSession Topic\");\r\n    };\r\n\r\n    const initGameSession = async () => {\r\n        connectAndSubscribe()\r\n        .then(() => initializeGameSession())\r\n        .then(() =>enterSession());\r\n    };\r\n\r\n    // GANAR\r\n    const handleGameStatus = (status) => {\r\n        if (status) {\r\n            showWinModal();\r\n            disableMovements();\r\n        }\r\n    };\r\n\r\n    const showWinModal = () => {\r\n        const modal = document.getElementById('winModal');\r\n        modal.style.display = 'flex';\r\n    };\r\n\r\n    const disableMovements = () => {\r\n        const controls = document.getElementById('controls');\r\n        if (controls) {\r\n            controls.style.pointerEvents = 'none';\r\n            controls.style.opacity = '0.5';\r\n        }\r\n        document.removeEventListener('keydown', handleKeydown);\r\n    };\r\n\r\n    const exitAfterWinning = async () => {\r\n        await api.removePlayerFromSession(session, nickname);\r\n        await stompClient.send(\"/app/sessions\", {});\r\n        sessionStorage.removeItem('session');\r\n        window.location.href = \"./sessionMenu.html\";\r\n    }\r\n\r\n    return {\r\n        init: function(){\r\n            initGameSession();\r\n        },\r\n        createPositionFromMovement,\r\n        movePlayer,\r\n        initializeBoard,\r\n        exitFromGameSession,\r\n        initializeGameSession,\r\n        exitAfterWinning\r\n    };\r\n\r\n})();\r\nboard.init();\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/js/board.js b/js/board.js
--- a/js/board.js	(revision b2bfe5c9b7bf13e6b32b674b18c0bf817ea1cd2d)
+++ b/js/board.js	(date 1733768497029)
@@ -9,7 +9,7 @@
 
 
     const api = apiClient;
-    const nickname = sessionStorage.getItem('nickname');
+    const nickname = sessionStorage.getItem('displayName');
     const session = sessionStorage.getItem('session');
     /*let state = null;
 
@@ -208,8 +208,8 @@
     const connectAndSubscribe = async function () {
         await new Promise((resolve, reject) => {
             console.info('Connecting to WS...');
-            let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');
-            //let socket = new SockJS('http://localhost:8080/stompendpoint');
+            // let socket = new SockJS('https://cargo-maze-backend-hwgpaheeb7hreqgv.eastus2-01.azurewebsites.net/stompendpoint');
+            let socket = new SockJS('http://localhost:8080/stompendpoint');
             stompClient = Stomp.over(socket);
             stompClient.connect({}, function (frame) {
             console.log('Connected: ' + frame);
